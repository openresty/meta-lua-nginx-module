
/*
 * Copyright (C) Yichun Zhang (agentzh)
 */


#ifndef _NGX_[% SUBSYS %]_LUA_SOCKET_UDP_H_INCLUDED_
#define _NGX_[% SUBSYS %]_LUA_SOCKET_UDP_H_INCLUDED_


#include "ngx_[% subsys %]_lua_common.h"


typedef struct ngx_[% subsys %]_lua_socket_udp_upstream_s
    ngx_[% subsys %]_lua_socket_udp_upstream_t;


typedef
    int (*ngx_[% subsys %]_lua_socket_udp_retval_handler)([% req_type %] *r,
        ngx_[% subsys %]_lua_socket_udp_upstream_t *u, lua_State *L);


typedef void (*ngx_[% subsys %]_lua_socket_udp_upstream_handler_pt)
    ([% req_type %] *r, ngx_[% subsys %]_lua_socket_udp_upstream_t *u);


typedef struct {
    ngx_connection_t         *connection;
    struct sockaddr          *sockaddr;
    socklen_t                 socklen;
    ngx_str_t                 server;
    ngx_log_t                 log;
} ngx_[% subsys %]_lua_udp_connection_t;


struct ngx_[% subsys %]_lua_socket_udp_upstream_s {
    ngx_[% subsys %]_lua_socket_udp_retval_handler          prepare_retvals;
    ngx_[% subsys %]_lua_socket_udp_upstream_handler_pt     read_event_handler;

    ngx_[% subsys %]_lua_loc_conf_t         *conf;
    ngx_[% req_subsys %]_cleanup_pt         *cleanup;
    [% req_type %]                          *request;
    ngx_[% subsys %]_lua_udp_connection_t    udp_connection;

    ngx_msec_t                       read_timeout;

    ngx_[% subsys %]_upstream_resolved_t    *resolved;

    ngx_uint_t                       ft_type;
    ngx_err_t                        socket_errno;
    size_t                           received; /* for receive */
    size_t                           recv_buf_size;

    ngx_[% subsys %]_lua_co_ctx_t           *co_ctx;

    unsigned                         waiting; /* :1 */
};


void ngx_[% subsys %]_lua_inject_socket_udp_api(ngx_log_t *log, lua_State *L);


#endif /* _NGX_[% SUBSYS %]_LUA_SOCKET_UDP_H_INCLUDED_ */

/* vi:set ft=c ts=4 sw=4 et fdm=marker: */
